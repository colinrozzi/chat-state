// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod theater {
    pub mod simple {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Clone)]
            pub struct Event {
                pub event_type: _rt::String,
                pub parent: Option<u64>,
                pub data: _rt::Vec<u8>,
            }
            impl ::core::fmt::Debug for Event {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Event")
                        .field("event-type", &self.event_type)
                        .field("parent", &self.parent)
                        .field("data", &self.data)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct MetaEvent {
                pub hash: u64,
                pub event: Event,
            }
            impl ::core::fmt::Debug for MetaEvent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("MetaEvent")
                        .field("hash", &self.hash)
                        .field("event", &self.event)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct Chain {
                pub events: _rt::Vec<MetaEvent>,
            }
            impl ::core::fmt::Debug for Chain {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Chain").field("events", &self.events).finish()
                }
            }
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum WitErrorType {
                OperationTimeout,
                ChannelClosed,
                ShuttingDown,
                FunctionNotFound,
                TypeMismatch,
                Internal,
                SerializationError,
                UpdateComponentError,
                Paused,
            }
            impl ::core::fmt::Debug for WitErrorType {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        WitErrorType::OperationTimeout => {
                            f.debug_tuple("WitErrorType::OperationTimeout").finish()
                        }
                        WitErrorType::ChannelClosed => {
                            f.debug_tuple("WitErrorType::ChannelClosed").finish()
                        }
                        WitErrorType::ShuttingDown => {
                            f.debug_tuple("WitErrorType::ShuttingDown").finish()
                        }
                        WitErrorType::FunctionNotFound => {
                            f.debug_tuple("WitErrorType::FunctionNotFound").finish()
                        }
                        WitErrorType::TypeMismatch => {
                            f.debug_tuple("WitErrorType::TypeMismatch").finish()
                        }
                        WitErrorType::Internal => {
                            f.debug_tuple("WitErrorType::Internal").finish()
                        }
                        WitErrorType::SerializationError => {
                            f.debug_tuple("WitErrorType::SerializationError").finish()
                        }
                        WitErrorType::UpdateComponentError => {
                            f.debug_tuple("WitErrorType::UpdateComponentError").finish()
                        }
                        WitErrorType::Paused => {
                            f.debug_tuple("WitErrorType::Paused").finish()
                        }
                    }
                }
            }
            impl WitErrorType {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> WitErrorType {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => WitErrorType::OperationTimeout,
                        1 => WitErrorType::ChannelClosed,
                        2 => WitErrorType::ShuttingDown,
                        3 => WitErrorType::FunctionNotFound,
                        4 => WitErrorType::TypeMismatch,
                        5 => WitErrorType::Internal,
                        6 => WitErrorType::SerializationError,
                        7 => WitErrorType::UpdateComponentError,
                        8 => WitErrorType::Paused,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod runtime {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Chain = super::super::super::theater::simple::types::Chain;
            #[allow(unused_unsafe, clippy::all)]
            pub fn log(msg: &str) -> () {
                unsafe {
                    let vec0 = msg;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/runtime")]
                    unsafe extern "C" {
                        #[link_name = "log"]
                        fn wit_import1(_: *mut u8, _: usize);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8, _: usize) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0.cast_mut(), len0) };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn get_chain() -> Chain {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 2
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/runtime")]
                    unsafe extern "C" {
                        #[link_name = "get-chain"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<*mut u8>();
                    let l3 = *ptr0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base13 = l2;
                    let len13 = l3;
                    let mut result13 = _rt::Vec::with_capacity(len13);
                    for i in 0..len13 {
                        let base = base13
                            .add(i * (24 + 4 * ::core::mem::size_of::<*const u8>()));
                        let e13 = {
                            let l4 = *base.add(0).cast::<i64>();
                            let l5 = *base.add(8).cast::<*mut u8>();
                            let l6 = *base
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len7 = l6;
                            let bytes7 = _rt::Vec::from_raw_parts(l5.cast(), len7, len7);
                            let l8 = i32::from(
                                *base
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            let l10 = *base
                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l11 = *base
                                .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len12 = l11;
                            super::super::super::theater::simple::types::MetaEvent {
                                hash: l4 as u64,
                                event: super::super::super::theater::simple::types::Event {
                                    event_type: _rt::string_lift(bytes7),
                                    parent: match l8 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l9 = *base
                                                    .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i64>();
                                                l9 as u64
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    data: _rt::Vec::from_raw_parts(l10.cast(), len12, len12),
                                },
                            }
                        };
                        result13.push(e13);
                    }
                    _rt::cabi_dealloc(
                        base13,
                        len13 * (24 + 4 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result14 = super::super::super::theater::simple::types::Chain {
                        events: result13,
                    };
                    result14
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn shutdown(data: Option<&[u8]>) -> Result<(), _rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let (result1_0, result1_1, result1_2) = match data {
                        Some(e) => {
                            let vec0 = e;
                            let ptr0 = vec0.as_ptr().cast::<u8>();
                            let len0 = vec0.len();
                            (1i32, ptr0.cast_mut(), len0)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/runtime")]
                    unsafe extern "C" {
                        #[link_name = "shutdown"]
                        fn wit_import3(_: i32, _: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import3(
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe { wit_import3(result1_0, result1_1, result1_2, ptr2) };
                    let l4 = i32::from(*ptr2.add(0).cast::<u8>());
                    let result8 = match l4 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l5 = *ptr2
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l6 = *ptr2
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len7 = l6;
                                let bytes7 = _rt::Vec::from_raw_parts(
                                    l5.cast(),
                                    len7,
                                    len7,
                                );
                                _rt::string_lift(bytes7)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result8
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod process {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Clone, Copy)]
            pub enum OutputMode {
                Raw,
                LineByLine,
                Json,
                Chunked,
            }
            impl ::core::fmt::Debug for OutputMode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        OutputMode::Raw => f.debug_tuple("OutputMode::Raw").finish(),
                        OutputMode::LineByLine => {
                            f.debug_tuple("OutputMode::LineByLine").finish()
                        }
                        OutputMode::Json => f.debug_tuple("OutputMode::Json").finish(),
                        OutputMode::Chunked => {
                            f.debug_tuple("OutputMode::Chunked").finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct ProcessConfig {
                pub program: _rt::String,
                pub args: _rt::Vec<_rt::String>,
                pub cwd: Option<_rt::String>,
                pub env: _rt::Vec<(_rt::String, _rt::String)>,
                pub buffer_size: u32,
                pub stdout_mode: OutputMode,
                pub stderr_mode: OutputMode,
                pub chunk_size: Option<u32>,
            }
            impl ::core::fmt::Debug for ProcessConfig {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ProcessConfig")
                        .field("program", &self.program)
                        .field("args", &self.args)
                        .field("cwd", &self.cwd)
                        .field("env", &self.env)
                        .field("buffer-size", &self.buffer_size)
                        .field("stdout-mode", &self.stdout_mode)
                        .field("stderr-mode", &self.stderr_mode)
                        .field("chunk-size", &self.chunk_size)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct ProcessStatus {
                pub pid: u64,
                pub running: bool,
                pub exit_code: Option<i32>,
                pub start_time: u64,
            }
            impl ::core::fmt::Debug for ProcessStatus {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ProcessStatus")
                        .field("pid", &self.pid)
                        .field("running", &self.running)
                        .field("exit-code", &self.exit_code)
                        .field("start-time", &self.start_time)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn os_spawn(config: &ProcessConfig) -> Result<u64, _rt::String> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 8 + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 8
                            + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ProcessConfig {
                        program: program0,
                        args: args0,
                        cwd: cwd0,
                        env: env0,
                        buffer_size: buffer_size0,
                        stdout_mode: stdout_mode0,
                        stderr_mode: stderr_mode0,
                        chunk_size: chunk_size0,
                    } = config;
                    let vec1 = program0;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let vec3 = args0;
                    let len3 = vec3.len();
                    let layout3 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec3.len() * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result3 = if layout3.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout3);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec3.into_iter().enumerate() {
                        let base = result3
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        {
                            let vec2 = e;
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len2;
                            *base.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                        }
                    }
                    let (result5_0, result5_1, result5_2) = match cwd0 {
                        Some(e) => {
                            let vec4 = e;
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            (1i32, ptr4.cast_mut(), len4)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let vec9 = env0;
                    let len9 = vec9.len();
                    let layout9 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec9.len() * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result9 = if layout9.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout9).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout9);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec9.into_iter().enumerate() {
                        let base = result9
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        {
                            let (t6_0, t6_1) = e;
                            let vec7 = t6_0;
                            let ptr7 = vec7.as_ptr().cast::<u8>();
                            let len7 = vec7.len();
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len7;
                            *base.add(0).cast::<*mut u8>() = ptr7.cast_mut();
                            let vec8 = t6_1;
                            let ptr8 = vec8.as_ptr().cast::<u8>();
                            let len8 = vec8.len();
                            *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len8;
                            *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr8.cast_mut();
                        }
                    }
                    let result10 = match stdout_mode0 {
                        OutputMode::Raw => 0i32,
                        OutputMode::LineByLine => 1i32,
                        OutputMode::Json => 2i32,
                        OutputMode::Chunked => 3i32,
                    };
                    let result11 = match stderr_mode0 {
                        OutputMode::Raw => 0i32,
                        OutputMode::LineByLine => 1i32,
                        OutputMode::Json => 2i32,
                        OutputMode::Chunked => 3i32,
                    };
                    let (result12_0, result12_1) = match chunk_size0 {
                        Some(e) => (1i32, _rt::as_i32(e)),
                        None => (0i32, 0i32),
                    };
                    let ptr13 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/process")]
                    unsafe extern "C" {
                        #[link_name = "os-spawn"]
                        fn wit_import14(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import14(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: i32,
                        _: i32,
                        _: i32,
                        _: i32,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import14(
                            ptr1.cast_mut(),
                            len1,
                            result3,
                            len3,
                            result5_0,
                            result5_1,
                            result5_2,
                            result9,
                            len9,
                            _rt::as_i32(buffer_size0),
                            result10,
                            result11,
                            result12_0,
                            result12_1,
                            ptr13,
                        )
                    };
                    let l15 = i32::from(*ptr13.add(0).cast::<u8>());
                    let result20 = match l15 {
                        0 => {
                            let e = {
                                let l16 = *ptr13.add(8).cast::<i64>();
                                l16 as u64
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l17 = *ptr13.add(8).cast::<*mut u8>();
                                let l18 = *ptr13
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len19 = l18;
                                let bytes19 = _rt::Vec::from_raw_parts(
                                    l17.cast(),
                                    len19,
                                    len19,
                                );
                                _rt::string_lift(bytes19)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    if layout3.size() != 0 {
                        _rt::alloc::dealloc(result3.cast(), layout3);
                    }
                    if layout9.size() != 0 {
                        _rt::alloc::dealloc(result9.cast(), layout9);
                    }
                    result20
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn os_write_stdin(pid: u64, data: &[u8]) -> Result<u32, _rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = data;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/process")]
                    unsafe extern "C" {
                        #[link_name = "os-write-stdin"]
                        fn wit_import2(_: i64, _: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import2(_rt::as_i64(&pid), ptr0.cast_mut(), len0, ptr1)
                    };
                    let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                    let result8 = match l3 {
                        0 => {
                            let e = {
                                let l4 = *ptr1
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<i32>();
                                l4 as u32
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l5 = *ptr1
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l6 = *ptr1
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len7 = l6;
                                let bytes7 = _rt::Vec::from_raw_parts(
                                    l5.cast(),
                                    len7,
                                    len7,
                                );
                                _rt::string_lift(bytes7)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result8
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn os_status(pid: u64) -> Result<ProcessStatus, _rt::String> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 40]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 40]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/process")]
                    unsafe extern "C" {
                        #[link_name = "os-status"]
                        fn wit_import1(_: i64, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: i64, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(_rt::as_i64(&pid), ptr0) };
                    let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                    let result11 = match l2 {
                        0 => {
                            let e = {
                                let l3 = *ptr0.add(8).cast::<i64>();
                                let l4 = i32::from(*ptr0.add(16).cast::<u8>());
                                let l5 = i32::from(*ptr0.add(20).cast::<u8>());
                                let l7 = *ptr0.add(32).cast::<i64>();
                                ProcessStatus {
                                    pid: l3 as u64,
                                    running: _rt::bool_lift(l4 as u8),
                                    exit_code: match l5 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l6 = *ptr0.add(24).cast::<i32>();
                                                l6
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    start_time: l7 as u64,
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l8 = *ptr0.add(8).cast::<*mut u8>();
                                let l9 = *ptr0
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len10 = l9;
                                let bytes10 = _rt::Vec::from_raw_parts(
                                    l8.cast(),
                                    len10,
                                    len10,
                                );
                                _rt::string_lift(bytes10)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result11
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn os_signal(pid: u64, signal: u32) -> Result<(), _rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/process")]
                    unsafe extern "C" {
                        #[link_name = "os-signal"]
                        fn wit_import1(_: i64, _: i32, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: i64, _: i32, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import1(_rt::as_i64(&pid), _rt::as_i32(&signal), ptr0)
                    };
                    let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                    let result6 = match l2 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l3 = *ptr0
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l4 = *ptr0
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len5 = l4;
                                let bytes5 = _rt::Vec::from_raw_parts(
                                    l3.cast(),
                                    len5,
                                    len5,
                                );
                                _rt::string_lift(bytes5)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result6
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn os_kill(pid: u64) -> Result<(), _rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/process")]
                    unsafe extern "C" {
                        #[link_name = "os-kill"]
                        fn wit_import1(_: i64, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: i64, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(_rt::as_i64(&pid), ptr0) };
                    let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                    let result6 = match l2 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l3 = *ptr0
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l4 = *ptr0
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len5 = l4;
                                let bytes5 = _rt::Vec::from_raw_parts(
                                    l3.cast(),
                                    len5,
                                    len5,
                                );
                                _rt::string_lift(bytes5)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result6
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod http_types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Bytes = _rt::Vec<u8>;
            #[derive(Clone)]
            pub struct HttpRequest {
                pub method: _rt::String,
                pub uri: _rt::String,
                pub headers: _rt::Vec<(_rt::String, _rt::String)>,
                pub body: Option<Bytes>,
            }
            impl ::core::fmt::Debug for HttpRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("HttpRequest")
                        .field("method", &self.method)
                        .field("uri", &self.uri)
                        .field("headers", &self.headers)
                        .field("body", &self.body)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct HttpResponse {
                pub status: u16,
                pub headers: _rt::Vec<(_rt::String, _rt::String)>,
                pub body: Option<Bytes>,
            }
            impl ::core::fmt::Debug for HttpResponse {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("HttpResponse")
                        .field("status", &self.status)
                        .field("headers", &self.headers)
                        .field("body", &self.body)
                        .finish()
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod http_client {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type HttpRequest = super::super::super::theater::simple::http_types::HttpRequest;
            pub type HttpResponse = super::super::super::theater::simple::http_types::HttpResponse;
            #[allow(unused_unsafe, clippy::all)]
            pub fn send_http(req: &HttpRequest) -> Result<HttpResponse, _rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 7 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 7
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let super::super::super::theater::simple::http_types::HttpRequest {
                        method: method0,
                        uri: uri0,
                        headers: headers0,
                        body: body0,
                    } = req;
                    let vec1 = method0;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let vec2 = uri0;
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    let vec6 = headers0;
                    let len6 = vec6.len();
                    let layout6 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec6.len() * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result6 = if layout6.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout6).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout6);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec6.into_iter().enumerate() {
                        let base = result6
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        {
                            let (t3_0, t3_1) = e;
                            let vec4 = t3_0;
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len4;
                            *base.add(0).cast::<*mut u8>() = ptr4.cast_mut();
                            let vec5 = t3_1;
                            let ptr5 = vec5.as_ptr().cast::<u8>();
                            let len5 = vec5.len();
                            *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len5;
                            *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr5.cast_mut();
                        }
                    }
                    let (result8_0, result8_1, result8_2) = match body0 {
                        Some(e) => {
                            let vec7 = e;
                            let ptr7 = vec7.as_ptr().cast::<u8>();
                            let len7 = vec7.len();
                            (1i32, ptr7.cast_mut(), len7)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let ptr9 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/http-client")]
                    unsafe extern "C" {
                        #[link_name = "send-http"]
                        fn wit_import10(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import10(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import10(
                            ptr1.cast_mut(),
                            len1,
                            ptr2.cast_mut(),
                            len2,
                            result6,
                            len6,
                            result8_0,
                            result8_1,
                            result8_2,
                            ptr9,
                        )
                    };
                    let l11 = i32::from(*ptr9.add(0).cast::<u8>());
                    let result29 = match l11 {
                        0 => {
                            let e = {
                                let l12 = i32::from(
                                    *ptr9.add(::core::mem::size_of::<*const u8>()).cast::<u16>(),
                                );
                                let l13 = *ptr9
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l14 = *ptr9
                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base21 = l13;
                                let len21 = l14;
                                let mut result21 = _rt::Vec::with_capacity(len21);
                                for i in 0..len21 {
                                    let base = base21
                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                    let e21 = {
                                        let l15 = *base.add(0).cast::<*mut u8>();
                                        let l16 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len17 = l16;
                                        let bytes17 = _rt::Vec::from_raw_parts(
                                            l15.cast(),
                                            len17,
                                            len17,
                                        );
                                        let l18 = *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l19 = *base
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len20 = l19;
                                        let bytes20 = _rt::Vec::from_raw_parts(
                                            l18.cast(),
                                            len20,
                                            len20,
                                        );
                                        (_rt::string_lift(bytes17), _rt::string_lift(bytes20))
                                    };
                                    result21.push(e21);
                                }
                                _rt::cabi_dealloc(
                                    base21,
                                    len21 * (4 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let l22 = i32::from(
                                    *ptr9
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::theater::simple::http_types::HttpResponse {
                                    status: l12 as u16,
                                    headers: result21,
                                    body: match l22 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l23 = *ptr9
                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l24 = *ptr9
                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len25 = l24;
                                                _rt::Vec::from_raw_parts(l23.cast(), len25, len25)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l26 = *ptr9
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l27 = *ptr9
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len28 = l27;
                                let bytes28 = _rt::Vec::from_raw_parts(
                                    l26.cast(),
                                    len28,
                                    len28,
                                );
                                _rt::string_lift(bytes28)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    if layout6.size() != 0 {
                        _rt::alloc::dealloc(result6.cast(), layout6);
                    }
                    result29
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod timing {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[allow(unused_unsafe, clippy::all)]
            pub fn now() -> u64 {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/timing")]
                    unsafe extern "C" {
                        #[link_name = "now"]
                        fn wit_import0() -> i64;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> i64 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn sleep(duration: u64) -> Result<(), _rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/timing")]
                    unsafe extern "C" {
                        #[link_name = "sleep"]
                        fn wit_import1(_: i64, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: i64, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(_rt::as_i64(&duration), ptr0) };
                    let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                    let result6 = match l2 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l3 = *ptr0
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l4 = *ptr0
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len5 = l4;
                                let bytes5 = _rt::Vec::from_raw_parts(
                                    l3.cast(),
                                    len5,
                                    len5,
                                );
                                _rt::string_lift(bytes5)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result6
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn deadline(timestamp: u64) -> Result<(), _rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/timing")]
                    unsafe extern "C" {
                        #[link_name = "deadline"]
                        fn wit_import1(_: i64, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: i64, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(_rt::as_i64(&timestamp), ptr0) };
                    let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                    let result6 = match l2 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l3 = *ptr0
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l4 = *ptr0
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len5 = l4;
                                let bytes5 = _rt::Vec::from_raw_parts(
                                    l3.cast(),
                                    len5,
                                    len5,
                                );
                                _rt::string_lift(bytes5)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result6
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod theater {
        pub mod simple {
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod process_handlers {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_handle_stdout_cabi<T: Guest>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: i64,
                    arg4: *mut u8,
                    arg5: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len1 = arg5;
                    let result2 = T::handle_stdout(
                        match arg0 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len0 = arg2;
                                    _rt::Vec::from_raw_parts(arg1.cast(), len0, len0)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        (arg3 as u64, _rt::Vec::from_raw_parts(arg4.cast(), len1, len1)),
                    );
                    let ptr3 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result2 {
                        Ok(e) => {
                            *ptr3.add(0).cast::<u8>() = (0i32) as u8;
                            let (t4_0,) = e;
                            match t4_0 {
                                Some(e) => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec5 = (e).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *ptr3
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                None => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr3.add(0).cast::<u8>() = (1i32) as u8;
                            let vec6 = (e.into_bytes()).into_boxed_slice();
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            ::core::mem::forget(vec6);
                            *ptr3
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len6;
                            *ptr3
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr6.cast_mut();
                        }
                    };
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_handle_stdout<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {}
                                _ => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base4 = l2;
                                    let len4 = l3;
                                    _rt::cabi_dealloc(base4, len4 * 1, 1);
                                }
                            }
                        }
                        _ => {
                            let l5 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l6 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l5, l6, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_handle_stderr_cabi<T: Guest>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: i64,
                    arg4: *mut u8,
                    arg5: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len1 = arg5;
                    let result2 = T::handle_stderr(
                        match arg0 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len0 = arg2;
                                    _rt::Vec::from_raw_parts(arg1.cast(), len0, len0)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        (arg3 as u64, _rt::Vec::from_raw_parts(arg4.cast(), len1, len1)),
                    );
                    let ptr3 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result2 {
                        Ok(e) => {
                            *ptr3.add(0).cast::<u8>() = (0i32) as u8;
                            let (t4_0,) = e;
                            match t4_0 {
                                Some(e) => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec5 = (e).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *ptr3
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                None => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr3.add(0).cast::<u8>() = (1i32) as u8;
                            let vec6 = (e.into_bytes()).into_boxed_slice();
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            ::core::mem::forget(vec6);
                            *ptr3
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len6;
                            *ptr3
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr6.cast_mut();
                        }
                    };
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_handle_stderr<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {}
                                _ => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base4 = l2;
                                    let len4 = l3;
                                    _rt::cabi_dealloc(base4, len4 * 1, 1);
                                }
                            }
                        }
                        _ => {
                            let l5 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l6 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l5, l6, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_handle_exit_cabi<T: Guest>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: i64,
                    arg4: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result1 = T::handle_exit(
                        match arg0 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len0 = arg2;
                                    _rt::Vec::from_raw_parts(arg1.cast(), len0, len0)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        (arg3 as u64, arg4),
                    );
                    let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result1 {
                        Ok(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            let (t3_0,) = e;
                            match t3_0 {
                                Some(e) => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec4 = (e).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *ptr2
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *ptr2
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr4.cast_mut();
                                }
                                None => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            let vec5 = (e.into_bytes()).into_boxed_slice();
                            let ptr5 = vec5.as_ptr().cast::<u8>();
                            let len5 = vec5.len();
                            ::core::mem::forget(vec5);
                            *ptr2
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len5;
                            *ptr2
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr5.cast_mut();
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_handle_exit<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {}
                                _ => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base4 = l2;
                                    let len4 = l3;
                                    _rt::cabi_dealloc(base4, len4 * 1, 1);
                                }
                            }
                        }
                        _ => {
                            let l5 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l6 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l5, l6, 1);
                        }
                    }
                }
                pub trait Guest {
                    fn handle_stdout(
                        state: Option<_rt::Vec<u8>>,
                        params: (u64, _rt::Vec<u8>),
                    ) -> Result<(Option<_rt::Vec<u8>>,), _rt::String>;
                    fn handle_stderr(
                        state: Option<_rt::Vec<u8>>,
                        params: (u64, _rt::Vec<u8>),
                    ) -> Result<(Option<_rt::Vec<u8>>,), _rt::String>;
                    fn handle_exit(
                        state: Option<_rt::Vec<u8>>,
                        params: (u64, i32),
                    ) -> Result<(Option<_rt::Vec<u8>>,), _rt::String>;
                }
                #[doc(hidden)]
                macro_rules! __export_theater_simple_process_handlers_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "theater:simple/process-handlers#handle-stdout")] unsafe extern
                        "C" fn export_handle_stdout(arg0 : i32, arg1 : * mut u8, arg2 :
                        usize, arg3 : i64, arg4 : * mut u8, arg5 : usize,) -> * mut u8 {
                        unsafe { $($path_to_types)*:: _export_handle_stdout_cabi::<$ty >
                        (arg0, arg1, arg2, arg3, arg4, arg5) } } #[unsafe (export_name =
                        "cabi_post_theater:simple/process-handlers#handle-stdout")]
                        unsafe extern "C" fn _post_return_handle_stdout(arg0 : * mut u8,)
                        { unsafe { $($path_to_types)*:: __post_return_handle_stdout::<$ty
                        > (arg0) } } #[unsafe (export_name =
                        "theater:simple/process-handlers#handle-stderr")] unsafe extern
                        "C" fn export_handle_stderr(arg0 : i32, arg1 : * mut u8, arg2 :
                        usize, arg3 : i64, arg4 : * mut u8, arg5 : usize,) -> * mut u8 {
                        unsafe { $($path_to_types)*:: _export_handle_stderr_cabi::<$ty >
                        (arg0, arg1, arg2, arg3, arg4, arg5) } } #[unsafe (export_name =
                        "cabi_post_theater:simple/process-handlers#handle-stderr")]
                        unsafe extern "C" fn _post_return_handle_stderr(arg0 : * mut u8,)
                        { unsafe { $($path_to_types)*:: __post_return_handle_stderr::<$ty
                        > (arg0) } } #[unsafe (export_name =
                        "theater:simple/process-handlers#handle-exit")] unsafe extern "C"
                        fn export_handle_exit(arg0 : i32, arg1 : * mut u8, arg2 : usize,
                        arg3 : i64, arg4 : i32,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_handle_exit_cabi::<$ty > (arg0,
                        arg1, arg2, arg3, arg4) } } #[unsafe (export_name =
                        "cabi_post_theater:simple/process-handlers#handle-exit")] unsafe
                        extern "C" fn _post_return_handle_exit(arg0 : * mut u8,) { unsafe
                        { $($path_to_types)*:: __post_return_handle_exit::<$ty > (arg0) }
                        } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_theater_simple_process_handlers_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 4 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 4
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod actor {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_init_cabi<T: Guest>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len1 = arg4;
                    let bytes1 = _rt::Vec::from_raw_parts(arg3.cast(), len1, len1);
                    let result2 = T::init(
                        match arg0 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len0 = arg2;
                                    _rt::Vec::from_raw_parts(arg1.cast(), len0, len0)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        (_rt::string_lift(bytes1),),
                    );
                    let ptr3 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result2 {
                        Ok(e) => {
                            *ptr3.add(0).cast::<u8>() = (0i32) as u8;
                            let (t4_0,) = e;
                            match t4_0 {
                                Some(e) => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec5 = (e).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *ptr3
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                None => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr3.add(0).cast::<u8>() = (1i32) as u8;
                            let vec6 = (e.into_bytes()).into_boxed_slice();
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            ::core::mem::forget(vec6);
                            *ptr3
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len6;
                            *ptr3
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr6.cast_mut();
                        }
                    };
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_init<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {}
                                _ => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base4 = l2;
                                    let len4 = l3;
                                    _rt::cabi_dealloc(base4, len4 * 1, 1);
                                }
                            }
                        }
                        _ => {
                            let l5 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l6 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l5, l6, 1);
                        }
                    }
                }
                pub trait Guest {
                    fn init(
                        state: Option<_rt::Vec<u8>>,
                        params: (_rt::String,),
                    ) -> Result<(Option<_rt::Vec<u8>>,), _rt::String>;
                }
                #[doc(hidden)]
                macro_rules! __export_theater_simple_actor_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "theater:simple/actor#init")] unsafe extern "C" fn
                        export_init(arg0 : i32, arg1 : * mut u8, arg2 : usize, arg3 : *
                        mut u8, arg4 : usize,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_init_cabi::<$ty > (arg0, arg1, arg2,
                        arg3, arg4) } } #[unsafe (export_name =
                        "cabi_post_theater:simple/actor#init")] unsafe extern "C" fn
                        _post_return_init(arg0 : * mut u8,) { unsafe {
                        $($path_to_types)*:: __post_return_init::<$ty > (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_theater_simple_actor_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 4 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 4
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub use alloc_crate::alloc;
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_default_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::theater::simple::process_handlers::__export_theater_simple_process_handlers_cabi!($ty
        with_types_in $($path_to_types_root)*::
        exports::theater::simple::process_handlers); $($path_to_types_root)*::
        exports::theater::simple::actor::__export_theater_simple_actor_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::theater::simple::actor);
    };
}
#[doc(inline)]
pub(crate) use __export_default_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:colinrozzi-wit:commit-actor:default:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 2114] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xc4\x0f\x01A\x02\x01\
A\x14\x01B\x16\x01s\x04\0\x08actor-id\x03\0\0\x01s\x04\0\x0achannel-id\x03\0\x02\
\x01p}\x01k\x04\x01r\x02\x08accepted\x7f\x07message\x05\x04\0\x0echannel-accept\x03\
\0\x06\x01kw\x01r\x03\x0aevent-types\x06parent\x08\x04data\x04\x04\0\x05event\x03\
\0\x09\x01r\x02\x04hashw\x05event\x0a\x04\0\x0ameta-event\x03\0\x0b\x01p\x0c\x01\
r\x01\x06events\x0d\x04\0\x05chain\x03\0\x0e\x01r\x05\x04hash\x04\x0bparent-hash\
\x05\x0aevent-types\x04data\x04\x09timestampw\x04\0\x0bchain-event\x03\0\x10\x01\
m\x09\x11operation-timeout\x0echannel-closed\x0dshutting-down\x12function-not-fo\
und\x0dtype-mismatch\x08internal\x13serialization-error\x16update-component-erro\
r\x06paused\x04\0\x0ewit-error-type\x03\0\x12\x01r\x02\x0aerror-type\x13\x04data\
\x05\x04\0\x0fwit-actor-error\x03\0\x14\x03\0\x14theater:simple/types\x05\0\x02\x03\
\0\0\x05chain\x02\x03\0\0\x08actor-id\x01B\x0d\x02\x03\x02\x01\x01\x04\0\x05chai\
n\x03\0\0\x02\x03\x02\x01\x02\x04\0\x08actor-id\x03\0\x02\x01@\x01\x03msgs\x01\0\
\x04\0\x03log\x01\x04\x01@\0\0\x01\x04\0\x09get-chain\x01\x05\x01p}\x01k\x06\x01\
j\0\x01s\x01@\x01\x04data\x07\0\x08\x04\0\x08shutdown\x01\x09\x03\0\x16theater:s\
imple/runtime\x05\x03\x01B\x1b\x01q\x04\x03raw\0\0\x0cline-by-line\0\0\x04json\0\
\0\x07chunked\0\0\x04\0\x0boutput-mode\x03\0\0\x01ps\x01ks\x01o\x02ss\x01p\x04\x01\
ky\x01r\x08\x07programs\x04args\x02\x03cwd\x03\x03env\x05\x0bbuffer-sizey\x0bstd\
out-mode\x01\x0bstderr-mode\x01\x0achunk-size\x06\x04\0\x0eprocess-config\x03\0\x07\
\x01kz\x01r\x04\x03pidw\x07running\x7f\x09exit-code\x09\x0astart-timew\x04\0\x0e\
process-status\x03\0\x0a\x01j\x01w\x01s\x01@\x01\x06config\x08\0\x0c\x04\0\x08os\
-spawn\x01\x0d\x01p}\x01j\x01y\x01s\x01@\x02\x03pidw\x04data\x0e\0\x0f\x04\0\x0e\
os-write-stdin\x01\x10\x01j\x01\x0b\x01s\x01@\x01\x03pidw\0\x11\x04\0\x09os-stat\
us\x01\x12\x01j\0\x01s\x01@\x02\x03pidw\x06signaly\0\x13\x04\0\x09os-signal\x01\x14\
\x01@\x01\x03pidw\0\x13\x04\0\x07os-kill\x01\x15\x03\0\x16theater:simple/process\
\x05\x04\x01B\x14\x01p}\x04\0\x05bytes\x03\0\0\x01o\x02ss\x01p\x02\x01k\x01\x01r\
\x04\x06methods\x03uris\x07headers\x03\x04body\x04\x04\0\x0chttp-request\x03\0\x05\
\x01r\x03\x06status{\x07headers\x03\x04body\x04\x04\0\x0dhttp-response\x03\0\x07\
\x01r\x02\x09cert-paths\x08key-paths\x04\0\x0atls-config\x03\0\x09\x01k{\x01ks\x01\
k\x0a\x01r\x03\x04port\x0b\x04host\x0c\x0atls-config\x0d\x04\0\x0dserver-config\x03\
\0\x0e\x01r\x07\x02idw\x04port{\x04hosts\x07running\x7f\x0croutes-county\x10midd\
leware-county\x11websocket-enabled\x7f\x04\0\x0bserver-info\x03\0\x10\x01r\x02\x07\
proceed\x7f\x07request\x06\x04\0\x11middleware-result\x03\0\x12\x03\0\x19theater\
:simple/http-types\x05\x05\x02\x03\0\x03\x0chttp-request\x02\x03\0\x03\x0dhttp-r\
esponse\x01B\x07\x02\x03\x02\x01\x06\x04\0\x0chttp-request\x03\0\0\x02\x03\x02\x01\
\x07\x04\0\x0dhttp-response\x03\0\x02\x01j\x01\x03\x01s\x01@\x01\x03req\x01\0\x04\
\x04\0\x09send-http\x01\x05\x03\0\x1atheater:simple/http-client\x05\x08\x01B\x07\
\x01@\0\0w\x04\0\x03now\x01\0\x01j\0\x01s\x01@\x01\x08durationw\0\x01\x04\0\x05s\
leep\x01\x02\x01@\x01\x09timestampw\0\x01\x04\0\x08deadline\x01\x03\x03\0\x15the\
ater:simple/timing\x05\x09\x01B\x0b\x01p}\x01k\0\x01o\x02w\0\x01o\x01\x01\x01j\x01\
\x03\x01s\x01@\x02\x05state\x01\x06params\x02\0\x04\x04\0\x0dhandle-stdout\x01\x05\
\x04\0\x0dhandle-stderr\x01\x05\x01o\x02wz\x01@\x02\x05state\x01\x06params\x06\0\
\x04\x04\0\x0bhandle-exit\x01\x07\x04\0\x1ftheater:simple/process-handlers\x05\x0a\
\x01B\x07\x01p}\x01k\0\x01o\x01s\x01o\x01\x01\x01j\x01\x03\x01s\x01@\x02\x05stat\
e\x01\x06params\x02\0\x04\x04\0\x04init\x01\x05\x04\0\x14theater:simple/actor\x05\
\x0b\x04\0#colinrozzi-wit:commit-actor/default\x04\0\x0b\x0d\x01\0\x07default\x03\
\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.227.1\x10wit-\
bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
